{"version":3,"sources":["components/ListItem.js","components/List.js","components/Message.js","components/App.js","index.js"],"names":["ListItem","listItem","handleEdit","handleDelete","Row","className","onClick","console","log","Col","xs","id","textField","document","getElementById","classList","contains","remove","add","handleCheck","text","List","list","handleClear","map","length","Button","variant","Message","removeAlert","useEffect","timeout","setTimeout","clearTimeout","Alert","App","useState","query","setQuery","groceryList","localStorage","getItem","JSON","parse","getGroceryListFromLocalStorage","setGroceryList","isEditing","setIsEditing","editItem","setEditItem","alertOptions","setAlertOptions","showAlert","setShowAlert","handleAlert","setItem","stringify","xl","lg","md","sm","Form","onSubmit","e","preventDefault","index","indexOf","newList","splice","newItem","Date","getTime","Group","controlId","Control","type","placeholder","value","onChange","target","find","item","filteredList","filter","removeItem","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.9794375f.chunk.js","sourcesContent":["import React from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport { FaEdit, FaTrash } from 'react-icons/fa'\n\nconst ListItem = ({ listItem, handleEdit, handleDelete }) => {\n  //cross/uncross the item onClick\n  const handleCheck = (id) => {\n    const textField = document.getElementById(id)\n    if (textField.classList.contains('checked')) {\n      textField.classList.remove('checked')\n    } else {\n      textField.classList.add('checked')\n    }\n  }\n  return (\n    <Row\n      className='border rounded list-item-container'\n      onClick={() => console.log('clicked')}\n    >\n      <Col\n        xs={9}\n        id={listItem.id}\n        className='text-capitalize'\n        onClick={() => handleCheck(listItem.id)}\n      >\n        {listItem.text}\n      </Col>\n\n      {/* Button Container */}\n      <Col xs={3} className='icon-container'>\n        <FaEdit\n          onClick={() => handleEdit(listItem.id)}\n          className='icon edit-icon'\n        />\n        <FaTrash\n          onClick={() => handleDelete(listItem.id)}\n          className='icon delete-icon'\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default ListItem\n","import React from 'react'\nimport { Button } from 'react-bootstrap'\nimport ListItem from './ListItem'\n\nconst List = ({ list, handleEdit, handleDelete, handleClear }) => {\n  return (\n    <div>\n      {list.map((listItem) => (\n        <ListItem\n          listItem={listItem}\n          handleEdit={handleEdit}\n          handleDelete={handleDelete}\n          key={listItem.id}\n        />\n      ))}\n\n      {/* If there is a list item, Clear all btn appears */}\n      {list.length > 0 && (\n        <div className='btn-container'>\n          <Button variant='custom' onClick={handleClear} className=' mt-2'>\n            Clear All\n          </Button>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default List\n","import React, { useEffect } from 'react'\nimport { Alert } from 'react-bootstrap'\n\nconst Message = ({ variant, text, removeAlert }) => {\n  //whenever an alert message is displayed, it disappears 1.5 seconds later\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      removeAlert()\n    }, 1500)\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [removeAlert])\n  return (\n    <Alert variant={variant} className='text-center p-1'>\n      {text}\n    </Alert>\n  )\n}\n\nexport default Message\n","import React, { useState, useEffect } from 'react'\nimport { Container, Form, Row, Col, Button } from 'react-bootstrap'\nimport List from './List'\nimport Message from './Message'\n\n// returns a list from local storage *** will be used in state\nconst getGroceryListFromLocalStorage = () => {\n  let groceryList = localStorage.getItem('groceryList')\n  if (groceryList) {\n    return JSON.parse(groceryList)\n  }\n  //if no list available in the local storage, state will be empty\n  else {\n    return []\n  }\n}\n\nconst App = () => {\n  const [query, setQuery] = useState('')\n  const [groceryList, setGroceryList] = useState(\n    getGroceryListFromLocalStorage()\n  )\n  const [isEditing, setIsEditing] = useState(false)\n  const [editItem, setEditItem] = useState({})\n  const [alertOptions, setAlertOptions] = useState({\n    variant: '',\n    text: '',\n  })\n  const [showAlert, setShowAlert] = useState(true)\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    //if input is empty, disable submit\n    if (!query) return\n    // if a current item is edited, update the list\n    if (isEditing && query) {\n      setIsEditing(false)\n      let index = groceryList.indexOf(editItem)\n      let newList = [...groceryList]\n      newList.splice(index, 1, { id: editItem.id, text: query })\n      setGroceryList(newList)\n      setQuery('')\n      handleAlert('info', 'Item updated')\n    }\n    // if it is a new item, add it to the list\n    else {\n      const newItem = { id: `id${new Date().getTime()}`, text: query }\n      setGroceryList([...groceryList, newItem])\n      setQuery('')\n      handleAlert('success', 'Item added')\n    }\n  }\n  // edit specific list item\n  const handleEdit = (id) => {\n    setIsEditing(true)\n    let editItem = groceryList.find((item) => item.id === id)\n    setEditItem(editItem)\n    setQuery(editItem.text)\n  }\n  // delete specific list item\n  const handleDelete = (id) => {\n    const filteredList = groceryList.filter((item) => item.id !== id)\n    setGroceryList(filteredList)\n    setQuery('')\n    handleAlert('danger', 'Item deleted')\n  }\n  // clear all list items\n  const handleClear = () => {\n    localStorage.removeItem('groceryList')\n    setGroceryList([])\n    setQuery('')\n    handleAlert('danger', 'Cleared all')\n  }\n  // Sets Message component props\n  const handleAlert = (variant, text) => {\n    setAlertOptions({ variant, text })\n    setShowAlert(true)\n  }\n\n  //remove Message component\n  const removeAlert = () => {\n    setShowAlert(false)\n  }\n\n  useEffect(() => {\n    // when grocery list updated, update the local storage as well\n    localStorage.setItem('groceryList', JSON.stringify(groceryList))\n  }, [groceryList])\n\n  return (\n    <>\n      <h1 className='text-center m-3'>Grocery List</h1>\n      <Row className='justify-content-center'>\n        <Col\n          xl={5}\n          lg={6}\n          md={8}\n          sm={10}\n          xs={11}\n          className='app-wrapper p-4 rounded'\n        >\n          {/* Alert Screen */}\n          {showAlert && (\n            <Message\n              variant={alertOptions.variant}\n              text={alertOptions.text}\n              removeAlert={removeAlert}\n            />\n          )}\n\n          <Form onSubmit={handleSubmit}>\n            <Row>\n              <Col xs={10}>\n                <Form.Group controlId='query'>\n                  <Form.Control\n                    type='text'\n                    placeholder='Milk'\n                    value={query}\n                    onChange={(e) => setQuery(e.target.value)}\n                  ></Form.Control>\n                </Form.Group>\n              </Col>\n              <Col xs={2}>\n                <Button variant='custom' type='submit'>\n                  {/* Conditional Render acc to isEditing state */}\n                  {isEditing ? 'Edit' : 'Add'}\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n          {/* grocery list screen */}\n          <List\n            list={groceryList}\n            handleEdit={handleEdit}\n            handleDelete={handleDelete}\n            handleClear={handleClear}\n          />\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport './styles.css'\n\nReactDOM.render(<App />, document.querySelector('#root'))\n"],"sourceRoot":""}